from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from datetime import datetime
import phonenumbers
from phonenumbers import carrier, timezone, geocoder
import requests
import json
import re

def escape_markdown(text: str) -> str:
    escape_chars = r'\_*~`>#+-=|{}.!()[]'
    return ''.join(f'\\{char}' if char in escape_chars else char for char in text)

def get_main_menu_text():
    return (
        "*‚õì–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–π—Å–∫*\n\n"
        "*‚úâÔ∏è Email*\n"
        "`Checkemail\\.com@gmail` \\- ‚ùå\n"
        "`Checkemail@gmail\\.com` \\- ‚úÖ\n"
        "`Checkemail@mail\\.ru` \\- ‚úÖ\n\n"
        "*üìçIP*\n"
        "`28828282882` \\- ‚ùå\n"
        "`57\\.23\\.42\\.5` \\- ‚úÖ\n\n"
        "*üì≤ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*\n"
        "`+$$\\-$$+##**` \\- ‚ùå\n"
        "`+79001234567` \\- ‚úÖ\n\n"
        "*üîÆ –Ø –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤*"
    )

def get_main_buttons():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üïµÔ∏è–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
    ])

async def check_phone_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if re.match(r"^[\w\.-]+@[\w\.-]+\.\w{2,}$", text):
        await check_email(update, text)
        return

    if re.match(r"^\d{1,3}(\.\d{1,3}){3}$", text):
        await check_ip(update, text)
        return

    try:
        phone_number = text
        parsed_number = phonenumbers.parse(phone_number, None)
        if not phonenumbers.is_valid_number(parsed_number):
            await update.message.reply_text("*üïµÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç*", parse_mode="MarkdownV2")
            return

        operator = carrier.name_for_number(parsed_number, "ru") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        time_zone = timezone.time_zones_for_number(parsed_number)[0] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        country = geocoder.description_for_number(parsed_number, "ru") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        region = geocoder.description_for_number(parsed_number, "ru") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        numverify_data = await check_with_numverify(phone_number)

        response = (
            f"*üì≤ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–º–µ—Ä–µ* `{escape_markdown(phone_number)}`\n\n"
            f"  \\| \\- *–°—Ç—Ä–∞–Ω–∞* \\- `{escape_markdown(country)}`\n"
            f"  \\| \\- *–†–µ–≥–∏–æ–Ω* \\- `{escape_markdown(region)}`\n"
            f"  \\| \\- *–û–ø–µ—Ä–∞—Ç–æ—Ä* \\- `{escape_markdown(operator)}`\n"
            f"  \\| \\- *–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å* \\- `{escape_markdown(time_zone)}`\n"
            f"  \\| \\- *–°—Ç–∞—Ç—É—Å* \\- `{escape_markdown(numverify_data.get('valid', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))}`\n"
            f"  \\| \\- *–¢–∏–ø* \\- `{escape_markdown(numverify_data.get('line_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))}`"
        )

        keyboard = [[InlineKeyboardButton(" <- –ù–∞–∑–∞–¥", callback_data="back")]]
        await update.message.reply_text(response, parse_mode="MarkdownV2", reply_markup=InlineKeyboardMarkup(keyboard))

    except Exception as e:
        print(f"Error: {e}")
        await update.message.reply_text("*üïµÔ∏è–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞*", parse_mode="MarkdownV2")

async def check_with_numverify(phone_number: str) -> dict:
    try:
        api_key = "bial3vg97k1owzf5"
        url = f"http://apilayer.net/api/validate?access_key={api_key}&number={phone_number}"
        response = requests.get(url)
        data = json.loads(response.text)

        return {
            'valid': "–ê–∫—Ç–∏–≤–µ–Ω" if data.get('valid') else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω",
            'line_type': data.get('line_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        }
    except Exception as e:
        print(f"Numverify error: {e}")
        return {'valid': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'line_type': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

async def check_email(update: Update, email: str):
    try:
        token = "bial3vg97k1owzf5"
        url = f"https://api.2ip.io/email/{email}?token={token}"
        res = requests.get(url)
        data = res.json()

        msg = (
            f"*üìß Email:* `{escape_markdown(email)}`\n"
            f"  \\| \\- *–§–æ—Ä–º–∞—Ç* \\- `{data.get('format_valid', False)}`\n"
            f"  \\| \\- *–î–æ–º–µ–Ω* \\- `{data.get('domain_valid', False)}`\n"
            f"  \\| \\- *–°—É—â–µ—Å—Ç–≤—É–µ—Ç* \\- `{data.get('mailbox_valid', False)}`\n"
            f"  \\| \\- *BlackList* \\- `{data.get('blacklisted', False)}`"
        )

        keyboard = [[InlineKeyboardButton(" <- –ù–∞–∑–∞–¥", callback_data="back")]]
        await update.message.reply_text(msg, parse_mode="MarkdownV2", reply_markup=InlineKeyboardMarkup(keyboard))

    except Exception as e:
        print(f"Email error: {e}")
        await update.message.reply_text("*üïµÔ∏è–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ email*", parse_mode="MarkdownV2")

async def check_ip(update: Update, ip: str):
    try:
        url = f"http://ip-api.com/json/{ip}?fields=status,message,query,country,regionName,city,isp"
        res = requests.get(url)
        data = res.json()

        if data.get("status") != "success":
            await update.message.reply_text(
                "*üïµÔ∏è–û—à–∏–±–∫–∞ –ù–µ–≤–µ—Ä–Ω—ã–π IP*",
                parse_mode="MarkdownV2"
            )
            return

        msg = (
            f"*üîÆ IP:* `{escape_markdown(data['query'])}`\n"
            f"  \\| \\- *–°—Ç—Ä–∞–Ω–∞* \\- `{escape_markdown(data.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))}`\n"
            f"  \\| \\- *–†–µ–≥–∏–æ–Ω* \\- `{escape_markdown(data.get('regionName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))}`\n"
            f"  \\| \\- *–ì–æ—Ä–æ–¥* \\- `{escape_markdown(data.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))}`\n"
            f"  \\| \\- *–ü—Ä–æ–≤–∞–π–¥–µ—Ä* \\- `{escape_markdown(data.get('isp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))}`"
        )

        keyboard = [[InlineKeyboardButton(" <- –ù–∞–∑–∞–¥", callback_data="back")]]
        await update.message.reply_text(msg, parse_mode="MarkdownV2", reply_markup=InlineKeyboardMarkup(keyboard))

    except Exception as e:
        print(f"IP error: {e}")
        await update.message.reply_text(
    "*üïµÔ∏è–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IP*",
    parse_mode="MarkdownV2",
    reply_markup=InlineKeyboardMarkup(keyboard)
)

    except Exception as e:
        print(f"IP error: {e}")
        await update.message.reply_text("*üïµÔ∏è–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IP*", parse_mode="MarkdownV2")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    link_message = await update.message.reply_text(
        "*üîÆ–í–ï–ß–ù–ê–Ø –°–°–´–õ–ö–ê –ù–ê CheckInfo*",
        parse_mode="MarkdownV2",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÆ–°—Å—ã–ª–∫–∞", url="https://t.me/checkinfovalid")]
        ])
    )

    await context.bot.pin_chat_message(
        chat_id=update.effective_chat.id,
        message_id=link_message.message_id,
        disable_notification=True
    )

    context.user_data['start_time'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    await update.message.reply_text(
        get_main_menu_text(),
        parse_mode="MarkdownV2",
        reply_markup=get_main_buttons()
    )

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "profile":
        user = query.from_user
        start_time = context.user_data.get('start_time', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

        text = (
            "*üïµÔ∏è–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
            f"*üÜî* \\- `{user.id}`\n"
            f"*üîÆUsername* \\- @{escape_markdown(user.username) if user.username else '–Ω–µ—Ç'}\n"
            f"*üóìÔ∏è–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏* \\- `{escape_markdown(start_time)}`"
        )
        keyboard = [[InlineKeyboardButton("<- –ù–∞–∑–∞–¥", callback_data="back")]]
        await query.edit_message_text(text, parse_mode="MarkdownV2", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "back":
        await query.edit_message_text(
            get_main_menu_text(),
            parse_mode="MarkdownV2",
            reply_markup=get_main_buttons()
        )

if __name__ == "__main__":
    app = ApplicationBuilder().token("7476234090:AAEhV7PNvZmhcymyTNh6cjE-T0ulbcIhR9o").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_buttons))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_phone_number))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()
